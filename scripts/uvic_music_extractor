#!/usr/bin/env python

"""
Script for running the music extractor
"""

import os
import sys
import argparse
import numpy as np

from uvic_music_extractor.extractors import Spectral
import uvic_music_extractor.utils as utils

def main(arguments):
    """
    Script entry
    """

    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('input', help="Input audio or directory", type=str)
    parser.add_argument('output', help="Output csv file", type=str)
    parser.add_argument('--rate', '-r', help="Sample rate to run audio feature extraction", type=int, default=44100)
    parser.add_argument('--normalize', '-n', help="Normalize audio to a specified loudness in LUFS,"
                                                  "defaults to -24. Pass in no to disable",
                        default=float(-24.0))
    args = parser.parse_args(arguments)

    # Check output before starting
    output = os.path.abspath(args.output)

    # Look for audio files to perform feature extraction on
    audio_files = utils.get_audio_files(args.input)
    print("Running feature extraction on {} files at a sampling rate of {}Hz".format(len(audio_files), args.rate))

    # Setup Extractors
    spectral = Spectral(args.rate)

    # Loop through all the audio files
    results = []
    header = ["filename"]
    for path in audio_files:

        # Load audio
        samples = utils.load_audio(path, args.rate, mono=False)

        # Normalize loudness if required
        if not (type(args.normalize) == str and args.normalize.lower() == 'no'):
            lufs = float(args.normalize)
            samples = utils.normalize_loudness(samples, args.rate, lufs)

        # Mix to mono and run extraction
        mono_samples = utils.mix_to_mono(samples)
        spectral_results = spectral(mono_samples)

        # Save results
        file_result = [os.path.basename(path)]
        file_result.extend(spectral_results)
        results.append(file_result)

        # Update header
        header.extend(spectral.get_headers())

    # Write
    header_str = ",".join(header)
    np.savetxt(output, results, fmt="%s", delimiter=",", header=header_str, comments="")


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
